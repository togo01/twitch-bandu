#!/usr/bin/python3
# -*- coding: utf-8 -*-
from os import listdir, rename
from os.path import isfile, isdir, join, splitext
import re
import json
import time
import base64

build_at = time.time()

origin_file = open("ttscache.json")
origindata = json.loads(origin_file.read())
origin_file.close()

input_file = open("ttscache_new.json")
ttsdata = json.loads(input_file.read())
input_file.close()

for key in ttsdata:
  if key not in origindata["ttscache"]:
    base64_bytes = ttsdata[key].encode('ascii')
    message_bytes = base64.b64decode(base64_bytes)
    f = open("ttscache/" + key + ".ogg", 'wb')
    f.write(message_bytes)
    f.close()
    origindata["ttscache"].append(key)

origindata["ttscache"].sort()
origindata["build"] = build_at

origin_file = open("ttscache.json", "w")
origin_file.write(json.dumps(origindata, ensure_ascii=False, indent=2))
origin_file.close()

version_file = open("version.json")
version = json.loads(version_file.read())
version_file.close()
version["ttscache"] = build_at
version_file = open("version.json", "w")
version_file.write(json.dumps(version, ensure_ascii=False, indent=2))
version_file.close()

# output = {
#   "new": [],
#   "index": {},
#   "audio": [],
#   "library": {},
#   "library_count": 0,
#   "build": time.time()
# }

# library = {}

# version = {
#   "build": output["build"]
# }

# fp = open("public.txt")
# public_cmds = fp.read().splitlines()
# fp.close()
# public_cmds.sort(key=len)
# public_cmds.sort()
# public_cmds = [str.lower() for str in public_cmds]

# for f in files:
#   filename, extension = splitext(f)
#   if extension != ".mp3":
#     continue

#   if filename.lower() != filename:
#     rename(join("audio", f), join("audio", filename.lower() + ".mp3"))

#   if filename[-1].isdigit():
#     number = re.findall(r'\d+', filename)[-1]
#     filename = filename[0:len(filename) - len(number)]

#   filename = filename.lower()
#   first_char = filename[0]

#   if filename not in output["new"] and filename not in public_cmds:
#     output["new"].append(filename)
#     output["new"].sort(key=len)
#     output["new"].sort()

#   if len(filename) > 1:
#     if first_char not in output["index"]:
#       output["index"][first_char] = [filename]
#     elif filename not in output["index"][first_char]:
#       output["index"][first_char].append(filename)
#       output["index"][first_char].sort(key=len, reverse=True)

#   if filename not in output["audio"]:
#     output["audio"].append(filename)
#     output["audio"].sort(key=len, reverse=True)

#   if filename not in library:
#     library[filename] = [f]
#   else:
#     library[filename].append(f)
#   output["library_count"] = output["library_count"] + 1


# for key in library:
#   if len(library[key]) > 1:
#     output["library"][key] = library[key]

# print("棒讀更新後指令來到了 " + str(len(output["audio"])) + " 個，共包含了 " + str(output["library_count"]) + " 個語音 :3_:")




# fp = open("audio.json", "w")
# fp.write(json.dumps(output, ensure_ascii=False, indent=2))
# fp.close()

# fp = open("version.json", "w")
# fp.write(json.dumps(version, ensure_ascii=False, indent=2))
# fp.close()
